"""
Comparaci√≥n de rendimiento: Arrays vs Listas Enlazadas
Demuestra por qu√© las listas enlazadas son ineficientes para b√∫squeda binaria.
"""

import time
import random
from linked_list_binary_search import (
    ListaEnlazada,
    busqueda_binaria_lista_enlazada,
    crear_lista_enlazada_desde_array
)
from basic_binary_search import busqueda_binaria

def comparar_acceso_por_indice():
    """Compara el acceso por √≠ndice entre arrays y listas enlazadas."""
    print("üî¢ COMPARACI√ìN: ACCESO POR √çNDICE")
    print("=" * 50)
    
    # Crear estructuras de datos
    tamanio = 10000
    arr = list(range(tamanio))
    lista = crear_lista_enlazada_desde_array(arr)
    
    # √çndices a probar
    indices = [0, 100, 1000, 5000, 9999]
    
    print(f"Tama√±o de la estructura: {tamanio}")
    print("\nAcceso por √≠ndice:")
    
    for indice in indices:
        # Array Python
        inicio = time.time()
        elemento_array = arr[indice]
        tiempo_array = time.time() - inicio
        
        # Lista Enlazada
        inicio = time.time()
        nodo_lista = lista.obtener_nodo_en_indice(indice)
        tiempo_lista = time.time() - inicio
        
        print(f"  √çndice {indice:4}: Array={tiempo_array:.8f}s, Lista={tiempo_lista:.8f}s, "
              f"Ratio={tiempo_lista/tiempo_array:.0f}x m√°s lento")

def comparar_busqueda_binaria():
    """Compara b√∫squeda binaria entre arrays y listas enlazadas."""
    print("\nüîç COMPARACI√ìN: B√öSQUEDA BINARIA")
    print("=" * 50)
    
    # Crear estructuras de datos
    tamanio = 10000
    arr = list(range(tamanio))
    lista = crear_lista_enlazada_desde_array(arr)
    
    # Objetivos a buscar
    objetivos = [0, 100, 1000, 5000, 9999, 15000]  # Algunos no existen
    
    print(f"Tama√±o de la estructura: {tamanio}")
    print("\nB√∫squeda binaria:")
    
    for objetivo in objetivos:
        # Array Python
        inicio = time.time()
        resultado_array = busqueda_binaria(arr, objetivo)
        tiempo_array = time.time() - inicio
        
        # Lista Enlazada
        inicio = time.time()
        resultado_lista = busqueda_binaria_lista_enlazada(lista, objetivo)
        tiempo_lista = time.time() - inicio
        
        print(f"  Objetivo {objetivo:5}: Array={tiempo_array:.8f}s, Lista={tiempo_lista:.8f}s, "
              f"Ratio={tiempo_lista/tiempo_array:.0f}x m√°s lento")

def comparar_escalabilidad():
    """Compara c√≥mo escalan las estructuras con diferentes tama√±os."""
    print("\nüìà COMPARACI√ìN: ESCALABILIDAD")
    print("=" * 50)
    
    tamanios = [100, 1000, 10000, 50000]
    
    print("Tama√±o | Array (s) | Lista (s) | Ratio")
    print("-" * 40)
    
    for tamanio in tamanios:
        # Crear estructuras
        arr = list(range(tamanio))
        lista = crear_lista_enlazada_desde_array(arr)
        
        # Buscar elemento en el medio
        objetivo = tamanio // 2
        
        # Medir array
        inicio = time.time()
        busqueda_binaria(arr, objetivo)
        tiempo_array = time.time() - inicio
        
        # Medir lista enlazada
        inicio = time.time()
        busqueda_binaria_lista_enlazada(lista, objetivo)
        tiempo_lista = time.time() - inicio
        
        ratio = tiempo_lista / tiempo_array if tiempo_array > 0 else float('inf')
        
        print(f"{tamanio:6} | {tiempo_array:.6f} | {tiempo_lista:.6f} | {ratio:.0f}x")

def comparar_busqueda_lineal_vs_binaria():
    """Compara b√∫squeda lineal vs binaria en listas enlazadas."""
    print("\n‚ö° COMPARACI√ìN: LINEAL vs BINARIA en Listas Enlazadas")
    print("=" * 60)
    
    tamanios = [100, 1000, 10000]
    
    for tamanio in tamanios:
        print(f"\nTama√±o: {tamanio}")
        print("-" * 30)
        
        # Crear lista enlazada
        arr = list(range(tamanio))
        lista = crear_lista_enlazada_desde_array(arr)
        
        # Buscar elemento al final
        objetivo = tamanio - 1
        
        # B√∫squeda lineal
        inicio = time.time()
        actual = lista.cabeza
        while actual and actual.valor != objetivo:
            actual = actual.siguiente
        tiempo_lineal = time.time() - inicio
        
        # B√∫squeda binaria (simulada)
        inicio = time.time()
        busqueda_binaria_lista_enlazada(lista, objetivo)
        tiempo_binaria = time.time() - inicio
        
        print(f"  B√∫squeda lineal: {tiempo_lineal:.6f}s")
        print(f"  B√∫squeda binaria: {tiempo_binaria:.6f}s")
        print(f"  ¬øCu√°l es m√°s r√°pida? {'LINEAL' if tiempo_lineal < tiempo_binaria else 'BINARIA'}")

def analizar_por_que_son_malas():
    """Explica por qu√© las listas enlazadas son malas para b√∫squeda binaria."""
    print("\nü§î ¬øPOR QU√â LAS LISTAS ENLAZADAS SON 'MALAS'?")
    print("=" * 60)
    
    print("1. üêå ACCESO POR √çNDICE:")
    print("   - Array: O(1) - Acceso directo")
    print("   - Lista Enlazada: O(n) - Debe recorrer nodos")
    print("   - Impacto: La b√∫squeda binaria pierde su ventaja O(log n)")
    
    print("\n2. üíæ LOCALIDAD DE CACHE:")
    print("   - Array: Datos contiguos en memoria")
    print("   - Lista Enlazada: Datos dispersos, saltos de memoria")
    print("   - Impacto: Mucho m√°s lento en la pr√°ctica")
    
    print("\n3. üîó OVERHEAD DE PUNTEROS:")
    print("   - Array: Solo datos")
    print("   - Lista Enlazada: Datos + punteros + fragmentaci√≥n")
    print("   - Impacto: M√°s memoria y m√°s lento")
    
    print("\n4. üìä COMPLEJIDAD REAL:")
    print("   - B√∫squeda binaria en array: O(log n)")
    print("   - B√∫squeda binaria en lista enlazada: O(n)")
    print("   - B√∫squeda lineal en lista enlazada: O(n)")
    print("   - Conclusi√≥n: ¬°No hay ventaja!")

def recomendaciones():
    """Proporciona recomendaciones sobre cu√°ndo usar cada estructura."""
    print("\nüí° RECOMENDACIONES")
    print("=" * 40)
    
    print("‚úÖ USAR ARRAYS (Listas de Python) PARA:")
    print("   - B√∫squeda binaria")
    print("   - Acceso frecuente por √≠ndice")
    print("   - Algoritmos que requieren acceso aleatorio")
    print("   - Cuando el tama√±o es conocido")
    
    print("\n‚úÖ USAR LISTAS ENLAZADAS PARA:")
    print("   - Inserci√≥n/eliminaci√≥n frecuente al inicio")
    print("   - Tama√±o din√°mico desconocido")
    print("   - Implementaci√≥n de pilas/colas")
    print("   - Cuando la memoria es muy limitada")
    
    print("\n‚ùå NO USAR LISTAS ENLAZADAS PARA:")
    print("   - B√∫squeda binaria")
    print("   - Acceso frecuente por √≠ndice")
    print("   - Algoritmos que requieren acceso aleatorio")

def main():
    """Funci√≥n principal de comparaci√≥n."""
    print("üéØ COMPARACI√ìN: ARRAYS vs LISTAS ENLAZADAS")
    print("=" * 60)
    print("Demostrando por qu√© las listas enlazadas son ineficientes")
    print("para b√∫squeda binaria comparadas con arrays normales.")
    print("=" * 60)
    
    try:
        comparar_acceso_por_indice()
        comparar_busqueda_binaria()
        comparar_escalabilidad()
        comparar_busqueda_lineal_vs_binaria()
        analizar_por_que_son_malas()
        recomendaciones()
        
        print("\nüéä ¬°An√°lisis completado!")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la comparaci√≥n: {e}")

if __name__ == "__main__":
    main() 